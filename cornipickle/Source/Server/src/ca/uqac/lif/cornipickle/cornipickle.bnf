# -----------------------------------------
# Grammar for Cornipickle; do not edit!
# -----------------------------------------

<S> := <predicate> | <def_set> | <statement> ;

# Auxiliary constructs in statements

<el_or_not>          := element | Îµ ;
<set_name>           := <css_selector> | <userdef_set> | <regex_capture> ;
<userdef_set>        := <string> ;
<var_name>           := ^\$[\w\d]+;

# CSS selector

<css_selector>     := $( <css_sel_contents> ) ;
<css_sel_contents> := <css_sel_part> <css_sel_contents> | <css_sel_part> ;
<css_sel_part>     := ^[\w\d\u0023\.\*]+; # \u0023 is the # symbol

# CSS attributes

<css_attribute>      := value | height | width | top | left | right
                        | bottom | color | id | text | background | border 
                        | event | cornipickleid | display | size | accesskey 
                        | checked | disabled ;

# Element property

<elem_property>      := <elem_property_pos> | <elem_property_com> ;
<elem_property_pos>  := <var_name> 's <css_attribute> ;
<elem_property_com>  := the <css_attribute> of <var_name> ;

# Regular expression capture

<regex_capture>      := match <elem_property> with <string> ;

# Cornichon statements

<statement>          := <foreach> | <exists> | <binary_stmt> | <negation>
                        | <temporal_stmt> | <userdef_stmt> | <let> | <when> ;
<binary_stmt>        := <equality> | <gt> | <lt> | <regex_match> 
                        | <and> | <or> | <implies> ;
<math>               := <add> | <sub> | <div> | <mult> ;
<temporal_stmt>      := <globally> | <eventually> | <never> | <next> | <next_time> ;
<foreach>            := For each <var_name> in <set_name> ( <statement> ) ;
<exists>             := There exists <var_name> in <set_name> such that ( <statement> ) ;
<when>               := When <var_name> is now <var_name> ( <statement> ) ;
<let>                := Let <var_name> be <property_or_const> ( <statement> ) ;
<and>                := ( <statement> ) And ( <statement> ) ;
<or>                 := ( <statement> ) Or ( <statement> ) ;
<implies>            := If ( <statement> ) Then ( <statement> ) ;
<negation>           := Not ( <statement> ) ;
<globally>           := Always ( <statement> ) ;
<never>              := Never ( <statement> ) ;
<next>               := Next ( <statement> ) ;
<eventually>         := Eventually ( <statement> ) ;
<next_time>         :=  The next time ( <statement> ) Then ( <statement> ) ;
<property_or_const>  := <elem_property> | <constant> | <math> ;
<equality>           := <property_or_const> equals <property_or_const>
                        | <property_or_const> is <property_or_const> ;
<gt>                 := <property_or_const> is greater than <property_or_const> ;
<lt>                 := <property_or_const> is less than <property_or_const> ;
<regex_match>        := <property_or_const> matches <property_or_const> ;

<add>                := ( <property_or_const> \u002b <property_or_const> ) ; #\u002b is the '+'
<sub>                := ( <property_or_const> - <property_or_const> ) ;
<mult>               := ( <property_or_const> \u002a <property_or_const> ) ; # \u002a is the '*'
<div>                := ( <property_or_const> / <property_or_const> ) ;

<constant>           := <number> | <string>;
<number>             := ^\d+;
<string>             := ^"[^"]*";

# User-defined set in extension

<def_set>            := A <def_set_name> is any of <def_set_elements> ;
<def_set_name>       := ^.*?(?=is);
<def_set_elements>   := <def_set_element> , <def_set_elements> | <def_set_element> ;
<def_set_element>    := <constant> ;

# User-defined predicate

<predicate>          := We say that <pred_pattern> when ( <statement> ) ;
<pred_pattern>       := ^.*?(?=when);

# User-defined statements. Rules get dynamically added here

<userdef_stmt>       := gnarfnfar ;