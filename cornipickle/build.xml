<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="Cornipickle" default="dist" basedir=".">

  <description>Build file for Cornipickle</description>
  
  <!-- Get location of temp dir -->
  <property environment="env"/>
  <property name="tempdir" value="${java.io.tmpdir}"/>
  
  <property name="jar.filename" value="Cornipickle.jar"/>
  
  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Nothing else to do -->
    <mkdir dir="doc"/>
    <mkdir dir="Source/Server/bin"/>
    <mkdir dir="Source/ServerTest/bin"/>
  </target>
  
  <target name="compile" depends="init" description="Compile the source">
    <!-- Compile the java code for each project -->
    <javac
      srcdir="Source/Server/src"
      destdir="Source/Server/bin"
      includeantruntime="false" />
    <copy todir="Source/Server/bin" includeemptydirs="false">
      <fileset dir="Source/Server/src" excludes="**/*.java" />
    </copy>
  </target>
  
  <target name="compile-tests" depends="init,compile,junit-download" description="Compile the tests">
    <!-- Compile the java code for each project -->
    <javac
      srcdir="Source/ServerTest/src"
      destdir="Source/ServerTest/bin"
      includeantruntime="false">
      <classpath>
        <pathelement location="Source/Server/bin"/>
        <pathelement path="${java.class.path}"/>
        <pathelement location="test/${junit.jarname}"/>
        <pathelement location="test/${junit.hamcrest}"/>
      </classpath>
    </javac>
    <copy todir="Source/ServerTest/bin" includeemptydirs="false">
      <fileset dir="Source/ServerTest/src" excludes="**/*.java" />
    </copy>
  </target>
  
  <target name="javadoc" depends="init" description="Generate the documentation">
    <javadoc packagenames="ca.uqac.lif.cornipickle.*"
             sourcepath="Source/Server/src"
             excludepackagenames=""
             defaultexcludes="yes"
             destdir="doc"
             author="true"
             version="true"
             use="true"
             windowtitle="Cornipickle Documentation">
      <doctitle><![CDATA[<h1>Cornipickle Documentation</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2014-2015 Sylvain Hall&eacute;. All Rights Reserved.</i>]]></bottom>
      <link href="http://docs.oracle.com/javase/7/docs/api/"/>
    </javadoc>
  </target>
  
  <target name="create_run_jar" depends="compile,javadoc" description="Create the runnable JAR">
      <jar destfile="${jar.filename}" filesetmanifest="mergewithoutmain">
	  <manifest>
	      <attribute name="Main-Class" value="ca.uqac.lif.cornipickle.server.Main"/>
	      <attribute name="Class-Path" value="."/>
	  </manifest>
	  <fileset dir="Source/Server/bin"/>
	  <fileset dir="Source/Server/src"/>
	  <!-- <fileset dir="Source/Server/lib"/>
	  <zipfileset excludes="META-INF/*.SF" src="Source/Server/lib/BullwinkleParser.jar"/> -->
	  <fileset dir="doc"/>
      </jar>
  </target>
  
  <target name="dist" depends="create_run_jar" description="Create distribution">
    <!-- Do nothing -->
  </target>
  
  <!-- Download jUnit JARs if not present -->
  <property name="junit.jarname" value="junit-4.12.jar"/>
  <property name="junit.hamcrest" value="hamcrest-core-1.3.jar"/>
  <condition property="junit.absent" value="false" else="true">
    <and>
      <available file="test/${junit.jarname}"/>
      <available file="test/${junit.hamcrest}"/>
    </and>
  </condition>
  <target name="junit-download" if="${junit.absent}">
    <mkdir dir="test"/>
    <get src="http://search.maven.org/remotecontent?filepath=junit/junit/4.12/${junit.jarname}" dest="test/${junit.jarname}"/>
    <get src="http://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest-core/1.3/${junit.hamcrest}" dest="test/${junit.hamcrest}"/>
  </target>
  
  <!-- Tests with jUnit-->
  <target name="test" depends="junit-download,compile-tests">
    <mkdir dir="test"/>
    <junit printsummary="yes" haltonfailure="yes">
      <classpath>
        <pathelement location="Source/Server/bin"/>
        <pathelement location="Source/ServerTest/bin"/>
        <pathelement path="${java.class.path}"/>
        <pathelement location="test/${junit.jarname}"/>
        <pathelement location="test/${junit.hamcrest}"/>
      </classpath>
      <formatter type="plain"/>
      <formatter type="xml"/>
      <batchtest fork="yes" todir="test">
        <fileset dir="Source/ServerTest/src">
          <include name="**/*.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>
  
  <!-- Check dependencies and download them if required -->
  <target name="deps-targetdir">
    <property name="deps.targetdir" value="lib" />
    <mkdir dir="${deps.targetdir}"/>
    <echo level="info">Creating folder ${deps.targetdir}. Note that libraries downloaded there (if any) must then be moved to a location within the Java classpath. See the readme file for more info.</echo>
  </target>
  
  <!-- Bullwinkle -->
  <condition property="Bullwinkle.absent" value="false" else="true">
    <available classname="ca.uqac.lif.bullwinkle.BnfParser"/>
  </condition>
  <target name="deps-bullwinkle" if="${Bullwinkle.absent}" depends="deps-targetdir">
    <echo message="Bullwinkle not present in classpath. Downloading..." level="info"/>
    <get src="http://sylvainhalle.github.io/Bullwinkle/releases/bullwinkle-1.1.1.jar" dest="${deps.targetdir}"/>
  </target>
  <!-- wro4j -->
  <condition property="wro4j.absent" value="false" else="true">
    <available classname="ro.isdc.wro.model.resource.processor.impl.js.JSMinProcessor"/>
  </condition>
  <target name="deps-wro4j" if="${wro4j.absent}" depends="deps-targetdir">
    <echo message="wro4j not present in classpath. Downloading..." level="info"/>
    <get src="https://wro4j.googlecode.com/files/wro4j-core-1.6.3.jar" dest="${deps.targetdir}"/>
    <get src="https://wro4j.googlecode.com/files/wro4j-runner-1.6.3-jar-with-dependencies.jar" dest="${deps.targetdir}"/>
  </target>
  <!-- json-simple -->
  <condition property="json.absent" value="false" else="true">
    <available classname="org.json.simple.parser.JSONParser"/>
  </condition>
  <target name="deps-json" if="${json.absent}" depends="deps-targetdir">
    <echo message="json-simple not present in classpath. Downloading..." level="info"/>
    <get src="https://json-simple.googlecode.com/files/json-simple-1.1.1.jar" dest="${deps.targetdir}"/>
  </target>
  <!-- Commons CLI -->
  <condition property="cli.absent" value="false" else="true">
    <available classname="org.apache.commons.cli.CommandLinee"/>
  </condition>
  <target name="deps-cli" if="${cli.absent}" depends="deps-targetdir">
    <echo message="Commons CLI not present in classpath. Downloading..." level="info"/>
    <get src="http://archive.apache.org/dist/commons/cli/binaries/commons-cli-1.3-bin.zip" dest="${deps.targetdir}"/>
    <unzip src="${deps.targetdir}/commons-cli-1.3-bin.zip" dest="${deps.targetdir}">
      <patternset>
        <include name="**/*.jar"/>
      </patternset>
      <mapper type="flatten"/>
    </unzip>
  </target>
  
  <!-- All there? -->
  <condition property="all.present" value="true" else="false">
    <and>
      <isfalse value="${Bullwinkle.absent}"/>
      <isfalse value="${wro4j.absent}"/>
      <isfalse value="${json.absent}"/>
      <isfalse value="${cli.absent}"/>
    </and>
  </condition>
  <target name="deps-present" if="all.present" depends="deps-bullwinkle,deps-wro4j,deps-json,deps-cli">
    <echo message="All dependencies were found in the classpath. Good!" level="info"/>
  </target>
  <!-- Main task: download dependencies -->
  <target name="deps" depends="deps-present">
  </target>
  
  <!-- Install dependencies -->
  <target name="deps-install" depends="deps">
    <property name="deps.installdir" value="/usr/lib/jvm/java-7-openjdk-amd64/jre/lib/ext/"/>
    <mkdir dir="${deps.installdir}"/>
    <copy todir="${deps.installdir}">
      <fileset dir="${deps.targetdir}">
        <include name="*.jar"/>
      </fileset>
    </copy>
  </target>
  
  <!-- Clean -->
  <target name="clean">
    <delete dir="Source/Server/bin"/>
    <delete dir="Source/ServerTest/bin"/>
    <delete dir="test"/>
    <delete dir="lib"/>
    <delete dir="doc"/>
  </target>
  
  <!-- Run -->
  <target name="run">
    <java jar="${jar.filename}" fork="true"/>
  </target>

</project>
